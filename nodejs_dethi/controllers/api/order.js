const Order = require("../../models/order");


// üõí L·∫•y danh s√°ch ƒë∆°n h√†ng
exports.listOrdersAPI = async (req, res, next) => {
  try {
    const orders = await Order.getAll();
    res.status(200).json({ data: orders });
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:", error);
    next(error);
  }
};

exports.addOrder = async (req, res, next) => {
  try {
    const {
      user_id,
      recipient_name,
      phone_number,
      address,
      total_amount,
      payment_method,
      status,
      products,
    } = req.body;

    if (
      !user_id ||
      !recipient_name ||
      !phone_number ||
      !address ||
      !total_amount ||
      !payment_method ||
      !products?.length
    ) {
      return res
        .status(400)
        .json({ error: "Thi·∫øu th√¥ng tin ƒë∆°n h√†ng ho·∫∑c s·∫£n ph·∫©mm." });
    }

    // T·∫°o ƒë·ªëi t∆∞·ª£ng order
    const order = {
      user_id,
      recipient_name,
      phone_number,
      address,
      total_amount,
      payment_method,
      status: status || "Pending",
      created_at: new Date(),
      updated_at: new Date(),
    };

    // üëâ G·ªçi addOrder v√† l·∫•y ph·∫£n h·ªìi
    const result = await Order.addOrder(order, products);

    if (result.success && result.paymentUrl) {
      // ‚úÖ Tr·∫£ v·ªÅ URL thanh to√°n n·∫øu d√πng VNPay
      return res
        .status(200)
        .json({
          success: true,
          paymentUrl: result.paymentUrl,
          vnp_Params: result.vnp_Params,
        });
    }

    // ‚úÖ Tr·∫£ v·ªÅ th√¥ng b√°o th√†nh c√¥ng n·∫øu kh√¥ng thanh to√°n VNPay
    res
      .status(201)
      .json({
        success: true,
        message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.",
        result,
      });
  } catch (error) {
    console.error("L·ªói khi th√™m ƒë∆°n h√†ng:", error);
    next(error);
  }
};

// ‚úèÔ∏è C·∫≠p nh·∫≠t ƒë∆°n h√†ng
exports.updateOrder = async (req, res, next) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    if (!id)
      return res.status(400).json({ error: "Thi·∫øu ID ƒë∆°n h√†ng ƒë·ªÉ c·∫≠p nh·∫≠t." });
    if (!status) {
      return res.status(400).json({ error: "Thi·∫øu th√¥ng tin c·∫ßn c·∫≠p nh·∫≠t." });
    }

    const result = await Order.updateOrder(status, id);
    if (!result)
      return res
        .status(404)
        .json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ƒë·ªÉ c·∫≠p nh·∫≠t." });

    res
      .status(200)
      .json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.", result, status });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", error);
    next(error);
  }
};

// ‚ùå X√≥a ƒë∆°n h√†ng
exports.deleteOrder = async (req, res, next) => {
  try {
    const { id } = req.params;

    if (!id)
      return res.status(400).json({ error: "Thi·∫øu ID ƒë∆°n h√†ng ƒë·ªÉ x√≥a." });

    const result = await Order.deleteOrder(id);
    if (!result)
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ƒë·ªÉ x√≥a." });

    res
      .status(200)
      .json({ message: "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng.", result });
  } catch (error) {
    console.error("L·ªói khi x√≥a ƒë∆°n h√†ng:", error);
    next(error);
  }
};

// exports.listOrderDetailsAPI = async (req, res, next) => {
//   try {
//     const { order_id } = req.params;
//     if (!order_id) {
//       return res.status(400).json({ message: "Thi·∫øu order_id" });
//     }

//     const details = await Order.getOrderDetailsByOrderId(order_id);
//     res.status(200).json({ data: details });
//   } catch (error) {
//     console.error("L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:", error);
//     next(error);
//   }
// };

exports.listOrder = async (req, res, next) => {
  try {
    const { userId } = req.params;

    if (!userId) {
      return res.status(400).json({ message: "Thi·∫øu user_id" });
    }

    const details = await Order.getOrderById(userId);

    if (details.length === 0) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y chi ti·∫øt ƒë∆°n h√†ng cho user_id n√†y" });
    }

    res.status(200).json({ data: details });
  } catch (error) {
    console.error("L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:", error);
    next(error);
  }
};




exports.listOrderDetailsAPI = async (req, res, next) => {
  try {
    const { order_id } = req.params;

    if (!order_id) {
      return res.status(400).json({ message: "Thi·∫øu order_id" });
    }

    const details = await Order.getOrderDetailsByOrderId(order_id);

    if (details.length === 0) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y chi ti·∫øt ƒë∆°n h√†ng." });
    }

    res.status(200).json({ data: details });

  } catch (error) {
    console.error("Error fetching order details:", error);
    next(error);
  }
};





exports.handleVnpayCallback = async (vnp_Params, orderData, products) => {
  try {
    // Log d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra
    console.log("orderData:", JSON.stringify(orderData, null, 2));  // In ra to√†n b·ªô orderData
    console.log("products:", JSON.stringify(products, null, 2));  // In ra to√†n b·ªô products

    if (vnp_Params.vnp_ResponseCode === "00") {
      const {
        user_id,
        recipient_name,
        phone_number,
        address,
        total_amount,
        payment_method,
        status = "paid", // ƒê·∫∑t m·∫∑c ƒë·ªãnh l√† "Paid"
      } = orderData;

      // Ki·ªÉm tra c√°c tham s·ªë c·∫ßn thi·∫øt c√≥ h·ª£p l·ªá kh√¥ng
      if (
        !user_id ||
        !recipient_name ||
        !phone_number ||
        !address ||
        !total_amount ||
        !payment_method ||
        !products?.length
      ) {
        console.log("D·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß:", {
          user_id,
          recipient_name,
          phone_number,
          address,
          total_amount,
          payment_method,
          productsLength: products?.length
        });
        throw new Error("D·ªØ li·ªáu thanh to√°n kh√¥ng ƒë·∫ßy ƒë·ªß.");
      }

      // T·∫°o ƒë∆°n h√†ng m·ªõi
      const order = {
        user_id,
        recipient_name,
        phone_number,
        address,
        total_amount,
        payment_method,
        status,  // Thanh to√°n th√†nh c√¥ng
        created_at: new Date(),
        updated_at: new Date(),
      };

      // L∆∞u ƒë∆°n h√†ng v√†o c∆° s·ªü d·ªØ li·ªáu
      const result = await Order.addOrder(order, products);

      console.log("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c th√™m v√†o CSDL:", result);
      return { message: "Thanh to√°n th√†nh c√¥ng!" };
    } else {
      throw new Error("Thanh to√°n th·∫•t b·∫°i!");
    }
  } catch (error) {
    console.error("L·ªói khi x·ª≠ l√Ω callback VNPay:", error);
    throw error;
  }
};







